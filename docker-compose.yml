# Docker Compose for Home Assistant
#
# Stores all secrets in .env, see this page for information
# https://docs.docker.com/compose/environment-variables/
#
# You need to add them all or this wont work.
services:
  traefik:
    container_name: traefik
    image: traefik:latest
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ${VOLUME_PATH}/traefik/config.yml:/config.yml
      - ${VOLUME_PATH}/traefik/acme.json:/acme.json
    networks:
      - proxy
    extra_hosts:
      - host.docker.internal:172.17.0.1
    ports:
      - 80:80
      - 443:443
    environment:
      - CLOUDFLARE_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_API_KEY=${CLOUDFLARE_API_KEY}
    command:
      - "--log.level=DEBUG"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.https.address=:443"
      # - "--certificatesresolvers.le.acme.tlschallenge=true"
      # - "--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.le.acme.dnschallenge.provider=cloudflare"
    labels:
      - traefik.enable=true
      # Global Middlewares
      - traefik.http.middlewares.redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.whitelist.ipallowlist.sourcerange=10.0.1.0/24,192.168.4.1/24,80.71.130.13/24
      - "traefik.http.middlewares.test-ipallowlist.ipallowlist.ipstrategy.depth=2"
      # Redirect HTTP to HTTPS
      - traefik.http.routers.redirect.entrypoints=http
      - traefik.http.routers.redirect.rule=HostRegexp(`{any:.*}`)
      - traefik.http.routers.redirect.middlewares=redirect
      # Enable Dashboard
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.traefik.tls.certresolver=le
      - traefik.http.routers.traefik.middlewares=whitelist
      - traefik.http.routers.traefik.service=api@internal

  home-assistant:
    container_name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:stable
    restart: always
    volumes:
      - ${VOLUME_PATH}/home-assistant:/config
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
    cap_add:
      - NET_ADMIN
      - NET_BIND_SERVICE
      - SYS_ADMIN
    network_mode: "host"
    environment:
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.home-assistant.loadbalancer.server.port=8123"
      - "traefik.http.routers.home-assistant.rule=Host(`home.${DOMAIN}`)"
      - "traefik.http.routers.home-assistant.entrypoints=https"
      - "traefik.http.routers.home-assistant.tls=true"
      - "traefik.http.routers.home-assistant.tls.certresolver=le"

  #MQTT Broker
  mqtt:
    container_name: mosquitto
    image: eclipse-mosquitto:latest
    restart: unless-stopped
    networks:
      - proxy
    ports:
      - 1883:1883
      - 9001:9001
    volumes:
      - ${VOLUME_PATH}/mqtt/mosquitto/config:/mosquitto/config
      - ${VOLUME_PATH}/mqtt/mosquitto/data:/mosquitto/data
      - ${VOLUME_PATH}/mqtt/mosquitto/log:/mosquitto/log
    labels:
      - traefik.enable=true
      - traefik.http.routers.mqtt.entrypoints=https
      - traefik.http.routers.mqtt.rule=Host(`mqtt.${DOMAIN}`)
      - traefik.http.routers.mqtt.tls.certresolver=le
      - traefik.http.routers.mqtt.middlewares=whitelist
      - traefik.http.services.mqtt.loadbalancer.server.port=1883
      - traefik.http.services.mqtt.loadbalancer.server.port=9001

  zigbee2mqtt:
    container_name: zigbee2mqtt
    image: koenkk/zigbee2mqtt
    restart: unless-stopped
    networks:
      - proxy
    volumes:
      - ${VOLUME_PATH}/zb2mqtt/data:/app/data
      - /run/udev:/run/udev:ro
    ports:
      # Frontend port
      - 8080:8080
    environment:
      - TZ=Europe/Berlin
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    labels:
      - traefik.enable=true
      - traefik.http.routers.zigbee2mqtt.entrypoints=https
      - traefik.http.routers.zigbee2mqtt.rule=Host(`zigbee2mqtt.${DOMAIN}`)
      - traefik.http.routers.zigbee2mqtt.tls.certresolver=le
      - traefik.http.routers.zigbee2mqtt.middlewares=whitelist
      - traefik.http.services.zigbee2mqtt.loadbalancer.server.port=8080

  zwavejs2mqtt:
    container_name: zwavejs2mqtt
    image: zwavejs/zwavejs2mqtt:latest
    restart: unless-stopped
    tty: true
    stop_signal: SIGINT
    networks:
      - proxy
    devices:
      # Z-Wave Stick (ttyACM0)
      - /dev/zwave:/dev/zwave
      # - '/dev/ttyACM0:/dev/ttyACM0'
    volumes:
      - ${VOLUME_PATH}/store:/usr/src/app/store
    ports:
      - "8091:8091" # port for web interface
      - "3000:3000" # port for zwave-js websocket server
    environment:
      MQTT_SERVER: "mosquitto" # Docker Hostname
      MQTT_USERNAME: ""
      MQTT_PASSWORD: ""
      USB_PATH: "/dev/zwave"
      OZW_NETWORK_KEY: ${ZWAVE_NETWORKKEY}
    labels:
      - traefik.enable=true
      - traefik.http.routers.zwavejs.entrypoints=https
      - traefik.http.routers.zwavejs.rule=Host(`zwavejs.${DOMAIN}`)
      - traefik.http.routers.zwavejs.tls.certresolver=le
      - traefik.http.routers.zwavejs.middlewares=whitelist
      - traefik.http.services.zwavejs.loadbalancer.server.port=8091

  node-red:
    container_name: nodered
    image: nodered/node-red:latest
    restart: always
    user: 1000:1000 # User ID for PI user
    volumes:
      - ${VOLUME_PATH}/node-red:/data
    networks:
      - proxy
    environment:
      - TZ=${TZ}
    dns:
      - "10.0.1.14" # Adguard DNS, should be ip of your IP.
      - "1.1.1.1" # Cloudflare DNS fallback
    labels:
      - traefik.enable=true
      - traefik.http.routers.node-red.entrypoints=https
      - traefik.http.routers.node-red.rule=Host(`nodered.${DOMAIN}`)
      - traefik.http.routers.node-red.tls.certresolver=le
      - traefik.http.routers.node-red.middlewares=whitelist
      - traefik.http.services.node-red.loadbalancer.server.port=1880

  adguard-home:
    container_name: adguard
    image: adguard/adguardhome:armhf-latest
    restart: unless-stopped
    volumes:
      - ${VOLUME_PATH}/adguard/work:/opt/adguardhome/work
      - ${VOLUME_PATH}/adguard/conf:/opt/adguardhome/conf
    networks:
      - proxy
    ports:
      - "53:53"
      - "53:53/udp"
      - "853:853"
      - "853:853/udp"
      - "67:67"
      - "68:68"
    dns:
      - 127.0.0.1 # Adguard DNS
      - 1.1.1.1 # # Cloudflare DNS fallback
    labels:
      - traefik.enable=true
      - traefik.http.routers.adguard.entrypoints=https
      - traefik.http.routers.adguard.rule=Host(`adguard.${DOMAIN}`)
      - traefik.http.routers.adguard.tls.certresolver=le
      - traefik.http.routers.adguard.middlewares=whitelist
      - traefik.http.services.adguard.loadbalancer.server.port=80

  # python-matter-server
  matter-server:
    image: ghcr.io/home-assistant-libs/python-matter-server:stable
    container_name: matter-server
    restart: unless-stopped
    # Required for mDNS to work correctly
    network_mode: host
    security_opt:
      # Needed for Bluetooth via dbus
      - apparmor:unconfined
    volumes:
      # Create an .env file that sets the USERDIR environment variable.
      - ${VOLUME_PATH}/matter-server/data:/data/
      # Required for Bluetooth via D-Bus
      - /run/dbus:/run/dbus:ro
    # If you adjust command line, make sure to pass the default CMD arguments too:
    #command: --storage-path /data --paa-root-cert-dir /data/credentials --bluetooth-adapter 0

  # A container that exposes an API to show its IP address
  whoami:
    container_name: whoami
    image: traefik/whoami
    networks:
      - proxy
    labels:
      - traefik.enable=true
      - traefik.http.routers.whoami.rule=Host(`whoami.${DOMAIN}`)

networks:
  proxy: # Used for Reve
